buildscript {
    repositories {
        jcenter()
        mavenCentral()
        maven {
            name = 'sponge'
            url = 'https://repo.spongepowered.org/maven'
        }
        maven {
            name = 'forge'
            url = 'https://files.minecraftforge.net/maven'
        }
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '4.+', changing: true
        classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
    }
}

repositories {
    //JEI
    maven { url 'http://dvs1.progwml6.com/files/maven' }
    //GT.
    maven { url 'https://jitpack.io' }

    maven {
        url "https://www.cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
}

apply plugin: 'net.minecraftforge.gradle'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
//apply plugin: 'eclipse'
apply plugin: 'maven-publish'

version = "${minecraft_version}-${mod_version}"
group = 'com.github.gregtech-intergalactical' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = 'AntimatterAPI'

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.
//Print out JVM information so that we know what version is running. Extreamly useful for people to know when helping you.
println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
sourceSets {
    main {
        java {
            srcDir 'src/main/java'
        }
        resources {
            include '**/**'
            srcDirs += 'src/generated/resources'
            exclude '.cache'
        }
    }
}

def shouldCheckEnv() {
    return findProject(':TesseractAPI') != null
}

def isVSTask() {
    return gradle.startParameter.taskNames[0].equals("genVSCodeRuns")
}

def getEnv() {
    boolean vscode = isVSTask()
    String resourcePath = vscode ? 'bin/main' : 'build/resources/main'
    String codePath = vscode ? 'bin/main' : 'build/classes/java/main'
    String s = "antimatter%%${project.file(resourcePath)}" + getPathSeparator() + "antimatter%%${project.file(codePath)}"
    if (findProject(':TesseractAPI') != null) {
        s += getPathSeparator() + "tesseract%%${project(':TesseractAPI').file(resourcePath)}" + getPathSeparator() + "tesseract%%${project(':TesseractAPI').file(codePath)}"
    }
    return s
}
import org.apache.tools.ant.taskdefs.condition.Os
def getPathSeparator() {
    if (Os.isFamily(Os.FAMILY_WINDOWS)) {
        return ";"
    }
    return ":"
}

minecraft {
    // The mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   Snapshot are built nightly.
    // stable_#            Stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.
    mappings channel: 'snapshot', version: "${mappings_version}"
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.

    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('run')
            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'DEBUG'
            property 'fml.earlyprogresswindow', 'false'

            arg "-mixin.config=antimatter.mixins.json"
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'
            if (shouldCheckEnv()) {
                 environment 'MOD_CLASSES', getEnv()
            }
            mods {
                antimatter {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'DEBUG'
            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'
            property 'fml.earlyprogresswindow', 'false'

            // Disable GUI by default, the IDE console can be used to enter commands
            arg '-nogui'

            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            arg "-mixin.config=antimatter.mixins.json"
            if (shouldCheckEnv()) {
                 environment 'MOD_CLASSES', getEnv()
            }
            mods {
                antimatter {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'DEBUG'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'
            property 'fml.earlyprogresswindow', 'false'

            arg "-mixin.config=antimatter.mixins.json"
            if (shouldCheckEnv()) {
                 environment 'MOD_CLASSES', getEnv()
            }
            args '--mod', 'antimatter', '--all', '--output', project.file('src/generated/resources/'), '--existing', sourceSets.main.resources.srcDirs[0]

            mods {
                antimatter {
                    source sourceSets.main
                }
            }
        }
    }
}


dependencies {
    // Specify the version of Minecraft to use, If this is any group other then 'net.minecraft' it is assumed
    // that the dep is a ForgeGradle 'patcher' dependency. And       it's patches will be applied.
    // The userdev artifact is a special name and will get all sorts of transformations applied to it.
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    //GT
    if (findProject(':TesseractAPI') != null) {
        implementation project(':TesseractAPI')
    } else {
        //Ensure there is a local mod version!
        runtimeOnly fg.deobf("com.github.GregTech-Intergalactical:TesseractAPI:${tesseract_version}")
        compileOnly ("com.github.GregTech-Intergalactical:TesseractAPI:${tesseract_version}")
    }

    //JEI
    compileOnly fg.deobf("mezz.jei:jei-${jei_version}:api")
    runtimeOnly fg.deobf("mezz.jei:jei-${jei_version}")

    //MIXIN
    annotationProcessor 'org.spongepowered:mixin:0.8.2:processor'

    /** KUBEJS STUFF **/
    implementation fg.deobf("curse.maven:rhino-416294:${rhino_file}")
    implementation fg.deobf("curse.maven:architectury-forge-419699:${architectury_file}")
    implementation fg.deobf("curse.maven:kubejs-238086:${kubejs_file}")
}


// Example configuration to allow publishing using the maven-publish task
// This is the preferred method to reobfuscate your jar file
//jar.finalizedBy('reobfJar')
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
//publish.dependsOn('reobfJar')

afterEvaluate { project ->
    project.tasks.publishToMavenLocal {
        onlyIf {
            return rootProject.name == "${modid}"
        }
    }
}

publishing {
    publications {
        forge(MavenPublication) {
            //artifactId = archivesBaseName
            artifact jar
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}
//MIXIN
apply plugin: 'org.spongepowered.mixin'

mixin {
    add sourceSets.main, "antimatter.refmap.json"
}

jar {
    zip64 true
    manifest {
        attributes([
                "MixinConfigs": "antimatter.mixins.json",
                "Specification-Title": project.name,
                "Specification-Vendor": "GregTech Intergalactical",
                "Specification-Version": project.version,
                "Implementation-Title": project.name,
                "Implementation-Version": project.version,
                "Implementation-Vendor": "GregTech Intergalactical",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}
