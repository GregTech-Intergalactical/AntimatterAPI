import org.gradle.jvm.toolchain.JavaLanguageVersion
plugins {
    id "maven-publish"
    id "architectury-plugin" version "3.4-SNAPSHOT"
    id "dev.architectury.loom" version "1.6-SNAPSHOT" apply(false)
    id "com.github.johnrengelman.shadow" version "7.0.0" apply(false)
}

architectury {
    minecraft = rootProject.minecraft_version
}

//Print out JVM information so that we know what version is running. Extreamly useful for people to know when helping you.
println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))

def isCI = System.getenv("GITHUB_ACTION")
def isRELEASE = System.getenv("GITHUB_RELEASE")
def gitHash() {
    String hash = System.getenv("GITHUB_SHA")
    if (hash != null) return hash.substring(0,8)
    return ""
}

def isAntimatterCI() {
    String val = System.getenv("GITHUB_WORKFLOW")
    return val != null && val.toLowerCase().startsWith("antimatter")
}

subprojects {
    apply plugin: "dev.architectury.loom"
    java.toolchain.languageVersion = JavaLanguageVersion.of(17)

    loom {
        silentMojangMappingsLicense()
    }

    dependencies {
        minecraft "com.mojang:minecraft:${rootProject.minecraft_version}"
        // The following line declares the mojmap mappings, you may use other mappings as well
        mappings loom.layered() {
            officialMojangMappings()
            parchment("org.parchmentmc.data:parchment-${rootProject.minecraft_version}:${rootProject.mappings_version}@zip")
        }
        // The following line declares the yarn mappings you may select this one as well.
        // mappings "net.fabricmc:yarn:1.17.1+build.32:v2"
    }


}

allprojects {
    apply plugin: "maven-publish"
    apply plugin: "java"
    apply plugin: "architectury-plugin"


    group = rootProject.maven_group

    apply from: 'https://raw.githubusercontent.com/GregTech-Intergalactical/GradleSripts/main/repositories.gradle'

    java {
        withSourcesJar()
    }

    tasks.withType(JavaCompile).configureEach {
        it.options.encoding = 'UTF-8'
    }

    if (isCI) {
        version = version + "-" + gitHash()
        println("In CI mode")
    }
}

subprojects{
    if (!project.path.contains("common")){
        apply plugin: "com.github.johnrengelman.shadow"

        configurations {
            common
            shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
            compileClasspath.extendsFrom common
            runtimeClasspath.extendsFrom common
            if (project.path.contains("forge")){
                developmentForge.extendsFrom common
            } else{
                developmentFabric.extendsFrom common
            }

        }

        shadowJar {
            configurations = [project.configurations.shadowCommon]
            archiveClassifier.set "dev-shadow"
        }

        remapJar {
            input.set shadowJar.archiveFile
            dependsOn shadowJar
            archiveClassifier.set null
        }

        jar {
            archiveClassifier.set "dev"
        }

        components.java {
            withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
                skip()
            }
        }
    }
}
