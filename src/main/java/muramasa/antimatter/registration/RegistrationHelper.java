package muramasa.antimatter.registration;

import muramasa.antimatter.AntimatterAPI;
import muramasa.antimatter.block.AntimatterItemBlock;
import net.minecraft.block.Block;
import net.minecraft.item.BlockItem;
import net.minecraftforge.event.RegistryEvent;
import net.minecraftforge.eventbus.api.SubscribeEvent;
import net.minecraftforge.fml.ModLoadingContext;
import net.minecraftforge.fml.common.Mod;
import net.minecraftforge.registries.ForgeRegistries;
import net.minecraftforge.registries.IForgeRegistry;
import net.minecraftforge.registries.IForgeRegistryEntry;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.stream.Collectors;

@Mod.EventBusSubscriber(bus=Mod.EventBusSubscriber.Bus.MOD)
public class RegistrationHelper {

    private static List<BlockItem> ITEM_BLOCKS = new ArrayList<>();

    @SubscribeEvent
    public static void onRegistryEvent(RegistryEvent.Register<?> e) {
//        if (e.getRegistry() == ForgeRegistries.BLOCKS && ModLoadingContext.get().getActiveNamespace().equals(Ref.ID)) {
//
//        }

        String domain = ModLoadingContext.get().getActiveNamespace();
        List<IForgeRegistryEntry<?>> entries = AntimatterAPI.all(IRegistryEntryProvider.class)
            .stream().filter(p -> p.getDomain().equals(domain))
            .map(p -> p.buildRegistryEntries(domain, e.getRegistry()))
            .flatMap(Collection::stream).collect(Collectors.toList());

        if (e.getRegistry() == ForgeRegistries.BLOCKS) {
            entries.forEach(o -> {
                if (o instanceof Block) {
                    if (o instanceof IItemBlockProvider) {
                        ITEM_BLOCKS.add(((IItemBlockProvider) o).getItemBlock());
                    } else {
                        ITEM_BLOCKS.add(new AntimatterItemBlock((Block) o));
                    }
                }
            });
        } else if (e.getRegistry() == ForgeRegistries.ITEMS) {
            ITEM_BLOCKS.forEach(i -> {
                if (i.getRegistryName().getNamespace().equals(domain)) {
                    ((IForgeRegistry) e.getRegistry()).register(i);
                }
            });
        }

        entries.forEach(o -> {
            ((IForgeRegistry) e.getRegistry()).register(o);
        });
    }

//    public static void buildMaterialTools(String domain) {
//        AntimatterAPI.all(AntimatterToolType.class).stream().filter(t -> t.isAutogenerated()).forEach(tool -> {
//            // if (tool.getOverlayLayers() == 0) tool.instantiate(domain, Data.NULL, null);
//            // else if (tool.isPowered()) tool.instantiatePoweredVariants(domain, Data.NULL, Data.NULL);
//            // else tool.instantiate(domain, Data.NULL, Data.NULL);
//            getMaterialsForDomain(domain).stream().filter(m -> m.has(MaterialType.TOOLS)).forEach(m -> {
//                if (tool.getOverlayLayers() == 0) {
//                    if (tool.isPowered()) tool.instantiatePoweredVariants(domain, m, null);
//                    else tool.instantiate(domain, m, null);
//                }
//                else if (tool == MORTAR && m.getToolQuality() <= 1) tool.instantiate(domain, m, null);
//                else getMaterialsForDomain(domain).stream().filter(s -> s.isHandle()).forEach(s -> {
//                        if (m.equals(s)) return; // Can't have same primary + secondary
//                        else if (tool.isPowered()) tool.instantiatePoweredVariants(domain, m, s);
//                        else if (tool.getSecondaryMaterialRequirement() != null && s.has(tool.getSecondaryMaterialRequirement())) tool.instantiate(domain, m, s); // e.g. crowbars
//                        else tool.instantiate(domain, m, s); // Rest
//                });
//            });
//        });
//    }
}
