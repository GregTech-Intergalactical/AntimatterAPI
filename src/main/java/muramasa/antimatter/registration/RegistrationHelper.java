package muramasa.antimatter.registration;

import muramasa.antimatter.AntimatterAPI;
import muramasa.antimatter.Ref;
import muramasa.antimatter.block.AntimatterItemBlock;
import net.minecraft.block.Block;
import net.minecraft.item.BlockItem;
import net.minecraft.item.Item;
import net.minecraftforge.event.RegistryEvent;
import net.minecraftforge.eventbus.api.SubscribeEvent;
import net.minecraftforge.fml.ModLoadingContext;
import net.minecraftforge.fml.common.Mod;
import net.minecraftforge.registries.ForgeRegistries;
import net.minecraftforge.registries.IForgeRegistry;

import java.util.ArrayList;
import java.util.List;

@Mod.EventBusSubscriber(bus=Mod.EventBusSubscriber.Bus.MOD)
public class RegistrationHelper {

    private static List<BlockItem> ITEM_BLOCKS = new ArrayList<>();

    @SubscribeEvent
    public static void onRegistryEvent(RegistryEvent.Register<?> e) {
        String domain = ModLoadingContext.get().getActiveNamespace();
        if (e.getRegistry() == ForgeRegistries.BLOCKS && domain.equals(Ref.ID)) AntimatterAPI.onRegistration(RegistrationEvent.DATA_INIT);

        AntimatterAPI.all(IRegistryEntryProvider.class, p -> p.onRegistryBuild(domain, e.getRegistry()));
        if (e.getRegistry() == ForgeRegistries.BLOCKS) {
            AntimatterAPI.all(Block.class, domain, b -> {
                if (b instanceof IAntimatterObject) b.setRegistryName(domain, ((IAntimatterObject) b).getId());
                ITEM_BLOCKS.add(b instanceof IItemBlockProvider ? ((IItemBlockProvider) b).getItemBlock() : new AntimatterItemBlock(b));
                ((IForgeRegistry) e.getRegistry()).register(b);
            });
        } else if (e.getRegistry() == ForgeRegistries.ITEMS) {
            ITEM_BLOCKS.forEach(i -> {
                if (i.getRegistryName() != null && i.getRegistryName().getNamespace().equals(domain)) {
                    ((IForgeRegistry) e.getRegistry()).register(i);
                }
            });
            AntimatterAPI.all(Item.class, domain, i -> {
                if (i instanceof IAntimatterObject) i.setRegistryName(domain, ((IAntimatterObject) i).getId());
                ((IForgeRegistry) e.getRegistry()).register(i);
            });
        }
    }

//    public static void buildMaterialTools(String domain) {
//        AntimatterAPI.all(AntimatterToolType.class).stream().filter(t -> t.isAutogenerated()).forEach(tool -> {
//            // if (tool.getOverlayLayers() == 0) tool.instantiate(domain, Data.NULL, null);
//            // else if (tool.isPowered()) tool.instantiatePoweredVariants(domain, Data.NULL, Data.NULL);
//            // else tool.instantiate(domain, Data.NULL, Data.NULL);
//            getMaterialsForDomain(domain).stream().filter(m -> m.has(MaterialType.TOOLS)).forEach(m -> {
//                if (tool.getOverlayLayers() == 0) {
//                    if (tool.isPowered()) tool.instantiatePoweredVariants(domain, m, null);
//                    else tool.instantiate(domain, m, null);
//                }
//                else if (tool == MORTAR && m.getToolQuality() <= 1) tool.instantiate(domain, m, null);
//                else getMaterialsForDomain(domain).stream().filter(s -> s.isHandle()).forEach(s -> {
//                        if (m.equals(s)) return; // Can't have same primary + secondary
//                        else if (tool.isPowered()) tool.instantiatePoweredVariants(domain, m, s);
//                        else if (tool.getSecondaryMaterialRequirement() != null && s.has(tool.getSecondaryMaterialRequirement())) tool.instantiate(domain, m, s); // e.g. crowbars
//                        else tool.instantiate(domain, m, s); // Rest
//                });
//            });
//        });
//    }
}
