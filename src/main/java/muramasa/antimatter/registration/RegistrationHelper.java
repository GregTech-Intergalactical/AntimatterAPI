package muramasa.antimatter.registration;

import muramasa.antimatter.AntimatterAPI;
import muramasa.antimatter.block.BlockStorage;
import muramasa.antimatter.block.BlockSurfaceRock;
import muramasa.antimatter.material.MaterialItem;
import muramasa.antimatter.material.Material;
import muramasa.antimatter.material.MaterialType;
import muramasa.antimatter.ore.BlockOre;
import muramasa.antimatter.ore.BlockOreStone;
import muramasa.antimatter.ore.StoneType;
import muramasa.antimatter.tool.AntimatterToolType;

import java.util.Collection;
import java.util.Set;
import java.util.stream.Collectors;

import static muramasa.antimatter.Data.MORTAR;
public class RegistrationHelper {

    public static void buildDefaultMaterialDerivedObjects(String domain) {
        buildMaterialItems(domain);
        buildOreBlocks(domain);
        buildStorageBlocks(domain);
        buildMaterialTools(domain);
    }

    public static Set<Material> getMaterialsForDomain(String domain, Collection<Material> materials) {
        return materials.stream().filter(m -> m.getDomain().equals(domain)).collect(Collectors.toSet());
    }

    public static Set<Material> getMaterialsForDomain(String domain) {
        return getMaterialsForDomain(domain, AntimatterAPI.all(Material.class));
    }

    public static void buildMaterialItems(String domain) {
        AntimatterAPI.all(MaterialType.class).forEach(t -> getMaterialsForDomain(domain).forEach(m -> {
            if (t.allowItemGen(m)) new MaterialItem(m.getDomain(), t, m);
        }));
    }

    public static void buildMaterialBlocks(String domain) {
        //TODO
    }

    public static void buildMaterialTools(String domain) {
        AntimatterAPI.all(AntimatterToolType.class).stream().filter(t -> t.isAutogenerated()).forEach(tool -> {
            // if (tool.getOverlayLayers() == 0) tool.instantiate(domain, Data.NULL, null);
            // else if (tool.isPowered()) tool.instantiatePoweredVariants(domain, Data.NULL, Data.NULL);
            // else tool.instantiate(domain, Data.NULL, Data.NULL);
            getMaterialsForDomain(domain).stream().filter(m -> m.has(MaterialType.TOOLS)).forEach(m -> {
                if (tool.getOverlayLayers() == 0) {
                    if (tool.isPowered()) tool.instantiatePoweredVariants(domain, m, null);
                    else tool.instantiate(domain, m, null);
                }
                else if (tool == MORTAR && m.getToolQuality() <= 1) tool.instantiate(domain, m, null);
                else getMaterialsForDomain(domain).stream().filter(s -> s.isHandle()).forEach(s -> {
                        if (m.equals(s)) return; // Can't have same primary + secondary
                        else if (tool.isPowered()) tool.instantiatePoweredVariants(domain, m, s);
                        else if (tool.getSecondaryMaterialRequirement() != null && s.has(tool.getSecondaryMaterialRequirement())) tool.instantiate(domain, m, s); // e.g. crowbars
                        else tool.instantiate(domain, m, s); // Rest
                });
            });
        });
    }

    public static void buildOreBlocks(String domain) {
        AntimatterAPI.all(StoneType.class).forEach(s -> {
            getMaterialsForDomain(domain, MaterialType.ORE.all()).forEach(m -> {
                new BlockOre(m.getDomain(), m, s, MaterialType.ORE);
            });
            getMaterialsForDomain(domain, MaterialType.ORE_SMALL.all()).forEach(m -> {
                new BlockOre(m.getDomain(), m, s, MaterialType.ORE_SMALL);
            });
            getMaterialsForDomain(domain, MaterialType.ROCK.all()).forEach(m -> {
                new BlockSurfaceRock(domain, m, s);
            });
        });
        getMaterialsForDomain(domain, MaterialType.ORE_STONE.all()).forEach(m -> {
            new BlockOreStone(m.getDomain(), m);
        });
    }

    public static void buildStorageBlocks(String domain) {
        getMaterialsForDomain(domain, MaterialType.BLOCK.all()).forEach(m -> new BlockStorage(m.getDomain(), m, MaterialType.BLOCK));
        getMaterialsForDomain(domain, MaterialType.FRAME.all()).forEach(m -> new BlockStorage(m.getDomain(), m, MaterialType.FRAME));
    }

}
