archivesBaseName = "${rootProject.antimatter_archive_base_name}-forge"
version = "${project.mod_version}-${rootProject.minecraft_version}"

architectury {
    platformSetupLoomIde()
    forge()
}

loom{
    accessWidenerPath = project(":antimatter-common").file("src/main/resources/antimatter.accesswidener")
    forge {
        convertAccessWideners = true
        extraAccessWideners.add("antimatter.accesswidener")
        mixinConfigs = [
                "antimatter.mixins.json", "antimatter-forge.mixins.json", "antimatter.rei.mixins.json"
        ]
        dataGen {
            mod project.modid
        }

        launches {
            data {
                arg "--existing", file("src/main/resources").absolutePath
            }
        }
    }
}


dependencies {
    forge "net.minecraftforge:forge:${project.minecraft_version}-${project.forge_version}"
    implementation(project(path: ":tesseract-forge", configuration: "namedElements"))
    common(project(path: ":tesseract-common", configuration: "namedElements"))

    common(project(path: ":antimatter-common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":antimatter-common", configuration: "transformProductionForge")) { transitive false }

    //MIXIN
    if (System.getProperty('idea.sync.active') != 'true') {
        annotationProcessor 'org.spongepowered:mixin:0.8.5-SNAPSHOT:processor'
    }
    //modCompileOnly("mezz.jei:jei-${rootProject.minecraft_version}-forge:${rootProject.jei_version}")
    //modRuntimeOnly("mezz.jei:jei-${rootProject.minecraft_version}-forge:${rootProject.jei_version}")
    modImplementation("mezz.jei:jei-1.18.2:9.7.2.1001")
    modCompileOnly "me.shedaniel:RoughlyEnoughItems-forge:${rootProject.rei_version}"
    modImplementation("com.blamejared.crafttweaker:CraftTweaker-forge-1.18.2:${rootProject.crafttweaker_version}")
    modImplementation(include("com.github.Reforged-Mods:ARRP-forge:0.6.7-1.18.2"))
    modRuntimeOnly("io.github.feltmc:fluidhandler-extras:1.0.1")
    modImplementation("earth.terrarium:botarium-forge-1.18.2:${project.botarium_version}")
    modImplementation(include("com.gtnewhorizon.structurelib:structurelib-forge:${project.structurelib_version}-${project.minecraft_version}"))
    modImplementation(include("com.teamresourceful.resourcefullib:resourcefullib-forge-1.18.2:${project.resourcefullib_version}"))
    modImplementation("dev.latvian.mods:kubejs-forge:${rootProject.kubejs_version}")
    modImplementation("curse.maven:the-one-probe-245211:${rootProject.top_forge_file}")
}

processResources {
    def toReplace = [
            "version"             : project.mod_version
    ]
    inputs.properties toReplace
    filesMatching("META-INF/mods.toml") {
        expand toReplace
    }
}

shadowJar {
    configurations = [project.configurations.shadowCommon]
    classifier "dev-shadow"
    exclude("architectury.common.json")
}

jar {
    zip64 true
    manifest {
        attributes([
                "Specification-Title": project.name,
                "Specification-Vendor": "GregTech Intergalactical",
                "Specification-Version": project.version,
                "Implementation-Title": project.name,
                "Implementation-Version": project.version,
                "Implementation-Vendor": "GregTech Intergalactical",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                'MixinConfigs': 'antimatter.mixins.json'
            ])
    }
}
publishing {
    publications {
        mavenJava(org.gradle.api.publish.maven.MavenPublication) {
            artifact(sourcesJar) {
                builtBy remapSourcesJar
            }

            afterEvaluate {
                artifact remapJar
            }
        }
    }

    repositories {
        def isCI = System.getenv("GITHUB_ACTION")
        def isRELEASE = System.getenv("GITHUB_RELEASE")
        if (isCI && isRELEASE) {
            maven {
                name = "GTMaven"
                url = "https://repo.repsy.io/mvn/trinsdar/gregtech-intergalactical/"
                credentials {
                    username = System.getenv("MAVEN_USERNAME")
                    password = System.getenv("MAVEN_PASSWORD")
                }
            }
        } else {
            maven { url "file:///${project.projectDir}/mcmodsrepo"}
        }
    }
}

sourcesJar {
    from(project(':antimatter-common').sourceSets.main.allSource) {
        exclude("antimatter.accesswidener") // duplicate on fabric, unneeded on forge
    }
}
