archivesBaseName = "${rootProject.antimatter_archive_base_name}-fabric"
version = "${project.mod_version}-${rootProject.minecraft_version}"

def generatedResources = file("src/generated/resources")
def accessWidenerFile = project(":antimatter-common").file("src/main/resources/antimatter.accesswidener")

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common
}

repositories {
    maven {
        url = uri("https://storage.googleapis.com/devan-maven/")
    }
    maven { url "https://maven.bai.lol" }
}

loom {
    accessWidenerPath = accessWidenerFile
}

dependencies{
    modImplementation "net.fabricmc:fabric-loader:${rootProject.fabric_loader_version}"
    modApi "net.fabricmc.fabric-api:fabric-api:${rootProject.fabric_api_version}"
    modCompileOnly("dev.latvian.mods:kubejs-fabric:${rootProject.kubejs_version}")
    common(project(path: ":tesseract-common", configuration: "namedElements")) { transitive false }
    implementation(project(path: ":tesseract-fabric", configuration: "namedElements")) { transitive false }
    afterEvaluate {
        include(project(path: ":tesseract-fabric"))
    }
    modImplementation(include("io.github.fabricators_of_create:Porting-Lib:${rootProject.port_lib_version}-beta+1.18.2-stable")){
        exclude(group: "net.fabricmc.fabric-api")
        exclude(group: "com.github.LlamaLad7")
    }
    modImplementation(include("io.github.tropheusj:serialization-hooks:0.3.23"))
    modImplementation(include("net.feltmc:felt-recipe-api:1.0.1")){
        exclude(group: "net.fabricmc.fabric-api")
        exclude(group: "com.terraformersmc")
    }
    modImplementation(include("net.feltmc:felt-player-item-api:1.1.0")){
        exclude(group: "net.fabricmc.fabric-api")
        exclude(group: "com.terraformersmc")
    }
    modImplementation(include("net.feltmc:felt-enchanting-api:1.1.0")) { transitive false }
    modImplementation(include("com.gtnewhorizon.structurelib:structurelib-fabric:${project.structurelib_version}-${project.minecraft_version}"))
    common(project(path: ":antimatter-common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":antimatter-common", configuration: "transformProductionFabric")) { transitive false }
    modImplementation(include("com.github.Trinsdar:ARRP:0.6.7-hotfix"))
    modCompileOnly("com.blamejared.crafttweaker:CraftTweaker-fabric-1.18.2:${rootProject.crafttweaker_version}")
    modCompileOnly(include("com.github.Trins-mods:CT-Fabric-Fluid-Support:${project.ct_fabric_fluid_support_hash}"))
    modRuntimeOnly "me.shedaniel:RoughlyEnoughItems-fabric:${rootProject.rei_version}"
    modCompileOnly("mezz.jei:jei-${rootProject.minecraft_version}-fabric:${rootProject.jei_version}"){
        exclude(group: "mezz.jei", module: "jei-1.18.2-fabric-api")
    }
    modImplementation("teamreborn:energy:${rootProject.energy_version}") {
        transitive = false
    }
    implementation(annotationProcessor(include("io.github.llamalad7:mixinextras-fabric:0.2.0-beta.11")))
    modImplementation("earth.terrarium:botarium-fabric-1.18.2:${project.botarium_version}"){
        transitive = false
    }
    modImplementation("com.teamresourceful.resourcefullib:resourcefullib-fabric-1.18.2:${project.resourcefullib_version}")
    modRuntimeOnly("com.terraformersmc:modmenu:${rootProject.mod_menu_version}") {
        exclude(group: "net.fabricmc.fabric-api")
    }
    implementation("com.electronwill.night-config:toml:${rootProject.nightconfig_version}")
    implementation("com.electronwill.night-config:core:${rootProject.nightconfig_version}")
    modImplementation "maven.modrinth:carbon-config:${project.carbon_config_fabric_version}"
    modCompileOnly("curse.maven:the-one-probe-fabric-581847:${project.top_fabric_file}")
    modCompileOnly "lol.bai.megane:megane-reborn-energy:${project.megane_version}"
    modCompileOnly "lol.bai.megane:megane-api:${project.megane_version}"
}

architectury {
    fabric()
}

task copyAccessWidener(type: Copy) {
    from accessWidenerFile
    into generatedResources
}

sourceSets {
    main {
        resources {
            srcDir copyAccessWidener
        }
    }
}

processResources {
    dependsOn copyAccessWidener

    def toReplace = [
            "version"             : project.mod_version
    ]

    inputs.properties toReplace
    filesMatching("fabric.mod.json") {
        expand toReplace
    }
}
sourcesJar {
    from(project(':antimatter-common').sourceSets.main.allSource) {
        exclude("antimatter.accesswidener") // duplicate on fabric, unneeded on forge
    }
}

publishing {
    publications {
        mavenJava(org.gradle.api.publish.maven.MavenPublication) {
            artifact(sourcesJar) {
                builtBy remapSourcesJar
            }

            afterEvaluate {
                artifact remapJar
            }
        }
    }

    repositories {
        def isCI = System.getenv("GITHUB_ACTION")
        def isRELEASE = System.getenv("GITHUB_RELEASE")
        if (isCI && isRELEASE) {
            maven {
                name = "GTMaven"
                url = "https://repo.repsy.io/mvn/trinsdar/gregtech-intergalactical/"
                credentials {
                    username = System.getenv("MAVEN_USERNAME")
                    password = System.getenv("MAVEN_PASSWORD")
                }
            }
        } else {
            maven { url "file:///${project.projectDir}/mcmodsrepo"}
        }
    }
}
